/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Funfund {
  export type CampaignStruct = {
    id: BigNumberish;
    creator: AddressLike;
    title: string;
    desc: string;
    img: string;
    goal: BigNumberish;
    endAt: BigNumberish;
    _status: BigNumberish;
    donors: AddressLike[];
    donorsContribution: BigNumberish[];
    amountCollected: BigNumberish;
  };

  export type CampaignStructOutput = [
    id: bigint,
    creator: string,
    title: string,
    desc: string,
    img: string,
    goal: bigint,
    endAt: bigint,
    _status: bigint,
    donors: string[],
    donorsContribution: bigint[],
    amountCollected: bigint
  ] & {
    id: bigint;
    creator: string;
    title: string;
    desc: string;
    img: string;
    goal: bigint;
    endAt: bigint;
    _status: bigint;
    donors: string[];
    donorsContribution: bigint[];
    amountCollected: bigint;
  };
}

export interface FunfundInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "campaignID"
      | "campaigns"
      | "createCampaign"
      | "deleteCampaigns"
      | "donateCampaign"
      | "externalChangeStatus"
      | "getAllCampaigns"
      | "getCampaignDetails"
      | "getContributionsByAddress"
      | "getTotalContributions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "campaignID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteCampaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donateCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "externalChangeStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContributionsByAddress",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalContributions",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "campaignID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donateCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalChangeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributionsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalContributions",
    data: BytesLike
  ): Result;
}

export interface Funfund extends BaseContract {
  connect(runner?: ContractRunner | null): Funfund;
  waitForDeployment(): Promise<this>;

  interface: FunfundInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  campaignID: TypedContractMethod<[], [bigint], "view">;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        creator: string;
        title: string;
        desc: string;
        img: string;
        goal: bigint;
        endAt: bigint;
        _status: bigint;
        amountCollected: bigint;
      }
    ],
    "view"
  >;

  createCampaign: TypedContractMethod<
    [
      _title: string,
      _desc: string,
      _img: string,
      _goal: BigNumberish,
      _endAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  deleteCampaigns: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  donateCampaign: TypedContractMethod<[_id: BigNumberish], [void], "payable">;

  externalChangeStatus: TypedContractMethod<
    [_id: BigNumberish, _newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllCampaigns: TypedContractMethod<
    [],
    [Funfund.CampaignStructOutput[]],
    "view"
  >;

  getCampaignDetails: TypedContractMethod<
    [_id: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string[],
        bigint[],
        bigint
      ] & {
        id: bigint;
        creator: string;
        title: string;
        desc: string;
        img: string;
        goal: bigint;
        endAt: bigint;
        _status: bigint;
        donors: string[];
        donorsContribution: bigint[];
        amountCollected: bigint;
      }
    ],
    "view"
  >;

  getContributionsByAddress: TypedContractMethod<
    [_id: BigNumberish, donors: AddressLike],
    [bigint],
    "view"
  >;

  getTotalContributions: TypedContractMethod<
    [_id: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "campaignID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        creator: string;
        title: string;
        desc: string;
        img: string;
        goal: bigint;
        endAt: bigint;
        _status: bigint;
        amountCollected: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      _title: string,
      _desc: string,
      _img: string,
      _goal: BigNumberish,
      _endAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteCampaigns"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "donateCampaign"
  ): TypedContractMethod<[_id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "externalChangeStatus"
  ): TypedContractMethod<
    [_id: BigNumberish, _newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllCampaigns"
  ): TypedContractMethod<[], [Funfund.CampaignStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getCampaignDetails"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string[],
        bigint[],
        bigint
      ] & {
        id: bigint;
        creator: string;
        title: string;
        desc: string;
        img: string;
        goal: bigint;
        endAt: bigint;
        _status: bigint;
        donors: string[];
        donorsContribution: bigint[];
        amountCollected: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContributionsByAddress"
  ): TypedContractMethod<
    [_id: BigNumberish, donors: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalContributions"
  ): TypedContractMethod<[_id: BigNumberish], [bigint], "view">;

  filters: {};
}
